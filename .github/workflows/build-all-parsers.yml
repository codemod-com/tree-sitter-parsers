name: Build All Tree-sitter Parsers

on:
  push:
    branches: [main, master]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  TREE_SITTER_ABI_VERSION: "15"

jobs:
  generate-matrix:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.set-matrix.outputs.languages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate matrix
        id: set-matrix
        run: |
          languages=$(jq -c '[.languages | keys[]]' languages.json)
          echo "languages=$languages" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.language }} on ${{ matrix.os }} (${{ matrix.arch }})
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        language: ${{ fromJson(needs.generate-matrix.outputs.languages) }}
        include:
          - { os: ubuntu-latest, arch: x64, platform: linux }
          - { os: ubuntu-latest, arch: arm64, platform: linux }
          - { os: macos-latest, arch: x64, platform: darwin }
          - { os: macos-latest, arch: arm64, platform: darwin }
          - { os: windows-latest, arch: x64, platform: win32 }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up QEMU (for ARM64 on Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Set up tree-sitter CLI
        uses: tree-sitter/setup-action/cli@v2
      
      - name: Extract language info
        id: lang-info
        run: |
          repo_url=$(jq -r ".languages[\"${{ matrix.language }}\"].repo" languages.json)
          ref=$(jq -r ".languages[\"${{ matrix.language }}\"].ref" languages.json)
          echo "repo_url=$repo_url" >> $GITHUB_OUTPUT
          echo "ref=$ref" >> $GITHUB_OUTPUT
      
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      - name: Build parser (Linux ARM64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace \
            --platform linux/arm64 \
            node:18-alpine \
            sh -c "
              apk add --no-cache git bash tree-sitter-cli build-base &&
              ./scripts/build-parser.sh '${{ matrix.language }}' '${{ steps.lang-info.outputs.repo_url }}' '${{ steps.lang-info.outputs.ref }}' 'artifacts'
            "
        env:
          TREE_SITTER_ABI_VERSION: ${{ env.TREE_SITTER_ABI_VERSION }}
      
      - name: Build parser (Native)
        if: matrix.os != 'ubuntu-latest' || matrix.arch != 'arm64'
        run: |
          ./scripts/build-parser.sh "${{ matrix.language }}" "${{ steps.lang-info.outputs.repo_url }}" "${{ steps.lang-info.outputs.ref }}" "artifacts"
        env:
          TREE_SITTER_ABI_VERSION: ${{ env.TREE_SITTER_ABI_VERSION }}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: parsers-${{ matrix.language }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: artifacts/
          retention-days: 7

  upload:
    name: Upload to S3
    needs: build
    runs-on: ubuntu-latest
    if: always() && needs.build.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts-download/
          pattern: parsers-*
          merge-multiple: true
      
      - name: Configure AWS Credentials for S3 Upload
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      
      - name: Upload parsers to S3
        run: |
          # Upload all parser files to S3
          find artifacts-download/ -type f \( -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "*.wasm" \) | while read -r file; do
            # Extract the relative path from artifacts directory
            relative_path=${file#artifacts-download/}
            
            # Construct S3 key
            s3_key="tree-sitter/parsers/tree-sitter-$relative_path"
            
            echo "Uploading: $file -> s3://${{ secrets.S3_BUCKET_NAME }}/$s3_key"
            
            # Upload to S3
            aws s3 cp "$file" "s3://${{ secrets.S3_BUCKET_NAME }}/$s3_key" \
              --metadata "source-file=$relative_path" \
              --cache-control "public, max-age=31536000" \
              --content-type "application/octet-stream"
          done
      
      - name: Generate and upload index
        run: |
          # Generate index file
          INDEX_FILE=$(mktemp)
          echo '{"parsers": [' > "$INDEX_FILE"
          
          # Generate JSON index of all uploaded files
          find artifacts-download/ -type f \( -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "*.wasm" \) | sort | while read -r file; do
            relative_path=${file#artifacts-download/}
            
            # Parse the path: language/sha/platform-arch.ext or language/sha/parser.wasm
            IFS='/' read -r language sha filename <<< "$relative_path"
            
            # Determine file type and platform/arch
            if [[ "$filename" == "parser.wasm" ]]; then
              platform="wasm"
              arch="wasm"
              filetype="wasm"
            else
              # Extract platform, arch, and extension from filename
              filename_no_ext="${filename%.*}"
              filetype="${filename##*.}"
              
              IFS='-' read -r platform arch <<< "$filename_no_ext"
            fi
            
            s3_url="https://${{ secrets.S3_BUCKET_NAME }}.s3.amazonaws.com/tree-sitter/parsers/tree-sitter-$relative_path"
            
            cat << EOF >> "$INDEX_FILE"
          {
            "language": "$language",
            "sha": "$sha",
            "platform": "$platform",
            "architecture": "$arch",
            "filetype": "$filetype",
            "url": "$s3_url",
            "path": "$relative_path"
          },
          EOF
          done
          
          # Remove the last comma and close the JSON
          sed -i '$ s/,$//' "$INDEX_FILE"
          echo ']}' >> "$INDEX_FILE"
          
          # Upload index file
          aws s3 cp "$INDEX_FILE" "s3://${{ secrets.S3_BUCKET_NAME }}/tree-sitter/parsers/index.json" \
            --content-type "application/json" \
            --cache-control "public, max-age=300"
          
          # Clean up
          rm -f "$INDEX_FILE"
      
      - name: Summary
        run: |
          echo "## ðŸŽ‰ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Parsers" >> $GITHUB_STEP_SUMMARY
          find artifacts-download/ -name "*.so" -o -name "*.dylib" -o -name "*.dll" -o -name "*.wasm" | sort | while read file; do
            echo "- \`$(basename "$file")\` ($(du -h "$file" | cut -f1))" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### S3 Location" >> $GITHUB_STEP_SUMMARY
          echo "Files uploaded to: \`s3://${{ secrets.S3_BUCKET_NAME }}/tree-sitter/parsers/\`" >> $GITHUB_STEP_SUMMARY 